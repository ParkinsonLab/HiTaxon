import argparse
import numpy as np
import pandas as pd

from ete3 import NCBITaxa

def expand_lineage(prediction, ncbi):
    """
    Get entire lineage for predicted taxa, from lowest possible rank to phlum
    Args:
        prediction: predicted taxa
        ncbi: NCBITaxa()

    """
    lineage = ncbi.get_lineage(prediction) 
    named_lineage = {"species": "NA", "genus": "NA", "family": "NA", "order": "NA", "class": "NA", "phylum": "NA"}
    if lineage is None:
        return named_lineage
    for taxa in lineage:
        rank = ncbi.get_rank([taxa])[taxa]
        if rank in named_lineage.keys():
            named_lineage[rank] =  ncbi.get_taxid_translator([taxa])[taxa]
    return named_lineage

def expand_predictions(predictions, ncbi):
    """
    Get entire lineage for all predictions generated by ML classifiers
    Args:
        predictions: file path to predictions
        ncbi: NCBITaxa()
    """
    ml_predictions = open(predictions).read().splitlines()
    ml_predictions = [prediction.replace("_"," ") for prediction in ml_predictions]
    #Get lineage for unique predictions
    unique_predictions = np.unique(np.array(ml_predictions))
    lineages = {}
    for prediction in unique_predictions:
        if prediction == "na" or prediction == "unclassified":
                prediction_2_id = 0
        else:
                prediction_2_id = ncbi.get_name_translator([prediction])[prediction][0]
        lineages[prediction] = expand_lineage(prediction_2_id, ncbi)
    #Get lineage for all predictions
    ml_expanded = [lineages[prediction] for prediction in ml_predictions]
    ml_expanded = pd.DataFrame(ml_expanded)
    return ml_expanded

def main():
    """
    Expand taxaonomic predictions to all ranks 
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("report_path", type = str, help = "path to ML classifier output")
    parser.add_argument("report_name", type = str. help = "name of output file")
    args = parser.parse_args()

    ncbi = NCBITaxa()
    report_name = args.report_name
    report_path = args.report_path
    predictions = report_path + "/" + report_name 
    predictions = expand_predictions(predictions, ncbi)

    predictions.to_csv(f"{report_path}/{report_name.split('.')[0][:-2]}_lineage_ml.csv")



if __name__ == "__main__":
    main()


